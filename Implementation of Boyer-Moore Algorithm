#include <iostream>
#include <string>
using namespace std;

#define NO_OF_CHARS 256

// Preprocessing function: bad character heuristic
void badCharHeuristic(string str, int size, int badchar[NO_OF_CHARS])
{
	int i;

	// Initialize all occurrences as -1
	for (i = 0; i < NO_OF_CHARS; i++)
badchar[i] = -1;

	// Fill the actual value of last occurrence of a character
	for (i = 0; i < size; i++)
badchar[(int)str[i]] = i;
		
	// Visualise the bad character shift table
    	cout << "Bad Character Shift Table:" << endl;
    	cout << "---------------------------" << endl;
    	cout << "Character : ";
    
    	for (int i = 0; i < 256; i++) {
if (badchar[i] != -1) {
cout << char(i) << " ";
}
}
    	cout << endl;
    	cout << "Index     : ";
    
    	for (int i = 0; i < 256; i++) {
if (badchar[i] != -1) {
cout << badchar[i] << " ";
}
}
    	cout << endl;
    	cout << "---------------------------" << endl;
}

// Preprocessing function: good suffix heuristics (case 1)
void goodSuffixc1 (string str, int size, int *bpos, int *shift)
{
	int i = size, j = size + 1;
	
	bpos[i] = j;
	
	while (i > 0) {
while (j <= size && str[i-1] != str[j-1]) {
if (shift[j] == 0)
shift[j] = j - i;
// Get the start position of the border of suffix
j = bpos[j]; 
}

//assign j-1 to bpos[i-1]
i--;
j--;
bpos[i] = j;
	}
}

// Preprocessing function: good suffix heuristics (case 2)
void goodSuffixc2(string str, int size, int *bpos, int *shift) {
	int i, j;
	j = bpos[0];
	
	for (i = 0; i < size; i++) {
if (shift[i] == 0)
shift[i] = j;

if (i == j)
j = bpos[j];
	}
}

/* Pattern searching function with bad character and good suffix heuristics */
void search(string txt, string pat)
{
	int m = pat.size();
	int n = txt.size();

	int badchar[NO_OF_CHARS];
	int bpos[m + 1], shift[m + 1];

	// Initialize all occurrence of shift to 0
    	for(int i = 0; i < m + 1; i++)
shift[i]=0;
    
	// Preprocessing function
	// Bad Character
	badCharHeuristic(pat, m, badchar);
	
	// Good Suffix
	goodSuffixc1(pat, m, bpos, shift);
	goodSuffixc2(pat, m, bpos, shift);

	// Visualise the good suffix shift table
	cout << endl;
    	cout << "Good Suffix Shift Table:" << endl;
   	cout << "---------------------------" << endl;
    	cout << "Position : ";
    
   	for (int i = 0; i < m; i++) {
        cout << i << " ";
    	}
    	cout << endl;
    	cout << "Shift    : ";
    	
	for (int i = 0; i < m; i++) {
cout << shift[i] << " "; 
    	}
    	cout << endl;
    	cout << "---------------------------" << endl << endl;
	
	int s = 0; // Shift of the pattern with respect to text
	int bcShift, gsShift;
	
	cout << "Text: " << txt << endl;
	cout << "Pattern: " << pat << endl << endl; 
	
	while (s <= (n - m)) {
int j = m - 1;

/* Keep reducing index j of pattern while characters of pattern and text are matching at this shift s */
while (j >= 0 && pat[j] == txt[s + j])
j--;
        
/* If the pattern is present at current shift, then index j will become -1 after the above loop */
if (j < 0) {
cout << "Pattern occurs at position, i = " << s << endl;

s += (s + m < n) ? m - badchar[txt[s + m]] : 1;
					
} else {
// Calculate the maximum shift using both tables
bcShift = max(1, j - badchar[txt[s + j]]);
gsShift = shift[j + 1];
s += max(bcShift, gsShift);
}
	} 
}

/* Driver code */
int main(){
	string txt = "gttatagtagcggcggctgatcgcggcgtagcggcgaa";
	string pat = "gtagcggcg";
	search(txt, pat);
	return 0;
}
